#!/bin/bash

# ToDo:
#  - Add option for styled output:
#       entry/Main.java
#       +- configuration/Configuration.java
#       |  +- util/ResourceReader.java
#       |  |  +- configuration/RootbeerPaths.java
#  - recognize java wildcard imports like
#       import org.trifort.rootbeer.compiler.*;
#  - recognize class imports which are subclasses, e.g.
#       import org.trifort.rootbeer.generate.opencl.tweaks.GencodeOptions.CompileArchitecture;
#    where only org/trifort/rootbeer/generate/opencl/tweaks/GencodeOptions.java
#    exists, but no extra file
#    org/trifort/rootbeer/generate/opencl/tweaks/GencodeOptions/CompileArchitecture.java
#       public class GencodeOptions
#       {
#           public enum CompileArchitecture {
#               Arch32bit, Arch64bit, Arch32bit64bit;
#           }
#  - option to print paths relative to parent path. Could shorten output length
#  - try to find unneeded includes


function echoerr() { echo "$@" 1>&2; }

function escapeRegex() {
    echo "$@" | sed -r 's|([][^$.*\])|\\\1|g'
}

function getIncludes() {
    local filePath=$1
    local lang=$language
    if [ "$lang" == 'auto' ]; then
        case "${filePath##*.}" in
            'c'|'cpp'|'cxx'|'cu'|'h'|'hpp'|'tpp')
                lang=cpp
                ;;
            'java')
                lang=java
                ;;
            *)
                echoerr -e "\e[31mError unknown file extension of included file '$filePath'"'!'" Please add the extension to this script or specify a language with the -l option"'!'"\e[0m"
                return
                ;;
        esac
    fi
    case "$lang" in
        'cpp')
            # #include "file.h"
            # #include <file.h>  // ignore, because most often in system path (?)
            # ignore commented lines starting: [^/]
            sed -nE 's|^[^/]*#[ \t]*include[ \t]*["<]([^">]*)[">].*|\1|p;' "$filePath"
            ;;
        'java')
            # import java.util.List;
            # ignore system libraries beginning with 'java.' (?) maybe as an option
            # TODO: heed wildcards like import mylib.*;
            sed -nE 's|^[^/]*import[ \t]*([^;]*);.*|\1|p;' "$filePath" | sed '/^java\./d; s|\.|/|g; s|$|.java|;'

            # find implicit includes i.e. used classes in the current directory
            local localClasses file name
            #echoerr "find '$(dirname "$filePath")' -maxdepth 1 -type f -iname '*.java'"
            IFS=$'\n' read -rd '' -a localClasses <<<"$(
                find "$(dirname "$filePath")" -maxdepth 1 -type f -iname '*.java'
            )"

            if [ $verbose -eq 1 ]; then
                echoerr "Test the following classs in the same folder for usage:"
                for file in ${localClasses[@]}; do
                    echoerr "  $file"
                done
            fi

            for file in ${localClasses[@]}; do
                if [ "$(realPath "$file")" == "$(realPath "$filePath")" ]; then
                    continue
                fi
                name=$(basename "$file")
                name=${name%\.java}
                # echoerr 'grep -E -q "^(.*[^a-zA-Z0-9])*'"$(escapeRegex "$name")"'([^a-zA-Z0-9].*)*$" '"$filePath"
                if grep -E -q '^(.*[^a-zA-Z0-9])*'"$(escapeRegex "$name")"'([^a-zA-Z0-9].*)*$' "$filePath"; then
                    echo "$(basename "$file")"
                fi
            done
            ;;
        *)
            echoerr -e "\e[31mNo parsing routine exists for language '$lang' yet"'!'"\e[0m"
            return
            ;;
    esac
}

function realPath() {
    local path=$1
    local name=
    if [ ! -d "$path" ]; then
        name=/$(basename "$path")
        path=$(dirname  "$path")
    fi
    echo "$(cd "$path" && pwd)$name"
}

function getPathDepth() {
    local path=$1
    if [ -d "$path" ]; then
        path=$( cd "$path" && pwd )
    else
        # collapse relative path specifications
        path=$(echo "$path" | sed 's|\./|g; s|[^/]+/\.\./||g')
    fi
    if [ "$path" == '/' ]; then
        echo 0
    fi
    path=${path//[^\/]}
    echo ${#path}
}

function getCommonPrefix() {
    # e.g. for $1="test mimi"
    # and      $2="test meh"
    # return      "test m"
    #
    # The idea is to use a backreference to match the same text again
    # after a newline
    printf "%s\n%s\n" "$1" "$2" | sed -r 'N;s|^(.*).*\n\1.*$|\1|'
}

function getRelativePath() {
    # returns relative path to from source to target
    local source=$1
    local target=$2

    local tname=
    if [ -f "$target" ]; then
        tname=/$(basename "$target")
        target=$(dirname  "$target")
    fi

    if [ -d "$source" ]; then source=$(cd "$source" && pwd); fi
    if [ -d "$target" ]; then target=$(cd "$target" && pwd); fi

    if [ "${source:0:1}" != '/' ]; then
        echo -e "\e[31mThe specified source '$source' is neither an absolute path nor does it seem to exist i.e. it is not reachable from the current path"'!'"\e[0m" 1>&2
    fi
    if [ "${target:0:1}" != '/' ]; then
        echo -e "\e[31mThe specified target '$target' is neither an absolute path nor does it seem to exist i.e. it is not reachable from the current path"'!'"\e[0m" 1>&2
    fi

    local prefix=$source
    local relative=${target#$prefix}
    local result=""
    while [ ! -z "$prefix" ] && [ "$relative" == "$target" ]; do
        prefix="${prefix%/*}"
        relative=${target#$prefix}
        if [ -z "$result" ]; then
            result=".."
        else
            result="../$result"
        fi
    done
    result=$result/${relative#/}
    result=${result#/}
    result=${result%/}
    if [ -z "$result" ]; then
        echo ".$tname"
    else
        echo "$result$tname"
    fi
}

function testGetRelativePath() {
    local src='/A/B/C'
    local targets=( '/A' '/A/B' '/A/B/C' '/A/B/C/D' '/A/B/C/D/E' '/A/B/D' '/A/B/D/E' '/A/D' '/A/D/E' '/D/E/F' )
    local relatives=( '../..' '..' '.' 'D' 'D/E' '../D' '../D/E' '../../D' '../../D/E' '../../../D/E/F' )
    for (( i=0; i<${#targets[@]}; ++i )); do
        printf "\e[37mgetRelativePath %s %10s == %16s\e[0m" \
               "$src" "${targets[i]}" "${relatives[i]}"
        local result=$(getRelativePath "$src" "${targets[i]}")
        if [ "$result" != "${relatives[i]}" ]; then
            echo -e "\e[31m failed ($result)\e[0m"
        else
            echo -e "\e[32m OK\e[0m"
        fi
    done
}

# ##############################################################################
# Treat command line args
# ##############################################################################

rootFile=
rootFolder=
verbose=0
nLevels=0
language=auto
quiet=0
relative=0
while [ ! -z "$1" ]; do
    case "$1" in
        -h)
            cat <<EOF
Visalize include dependencies of <file>.

    incvis [flags] <rootFile>

Flags:

  -C <rootFolder>     Change root folder. This affects include paths and the -n option
  -h                  Show this help message
  -l <auto|cpp|java>  Language style includes to parse (auto: choose by extension)
  -I path[:path[...]] Include directories where to look for. Either absolute or
                      relative to <rootFolder>
  -n <levels>         Search up to <levels> parent directories of <rootFolder>
  -q                  Suppress warnings like not finding system libraries
  -r                  Show all include paths relative to the file which includes it

Examples:

    incvis -I .:.. test.c
    incvis -n 5 test.c
EOF
            ;;
        -C)
            shift
            rootFolder=$1
            ;;
        -I|--include)
            shift
            INC=$1
            ;;
        -l|--language)
            shift
            case "$1" in
                auto) ;;
                cpp)  ;;
                java) ;;
                *)
                    echo "Unknown language '$1' specified"'!'
                    ;;
            esac
            language=$1
            ;;
        -n|--nlevels)
            shift
            nLevels=$1
            ;;
        -q|--quiet)
            quiet=1
            ;;
        -r|--relative)
            relative=1
            ;;
        -v|--verbose)
            verbose=1
            ;;
        *)
            rootFile=$1
            ;;
    esac
    shift
done

### Check if root file exists ###
if [ -z "$rootFile" ]; then
    echoerr -e "\e[31mPlease specify a source-file from which to start crawling"'!'"\e[0m"
    exit 1
elif [ ! -f "$rootFile" ]; then
    echoerr -e "\e[31mSpecified file ($rootFile) not found"'!'"\e[0m"
    exit 1
fi
rootFileName=$(basename "$rootFile")
if [ -z "$rootFolder" ]; then
    rootFolder=$(cd "$(dirname "$rootFile")" && pwd)
    #rootFolder=$(pwd)  # Can't decide which is better ...
else
    # the file to analyze must be in the root folder
    if [ ! -d "$rootFolder" ]; then
        echoerr -e "\e[31mSpecified root folder ($rootFolder) not found"'!'"\e[0m"
        exit 1
    fi
    rootFolder=$( cd "$rootFolder" && pwd )
    tmpFolder=$( cd "$(dirname "$rootFile")" && pwd )
    if [ "${tmpFolder#$rootFolder}" == "$tmpFolder" ]; then
        echoerr -e "\e[31mThe root folder ($rootFolder) must contain the initial file ($rootFile -> $tmpFolder)"'!'"\e[0m"
        exit 1
    fi
fi

rootFolderLevel=$(getPathDepth "$rootFolder")
minDepth=$((rootFolderLevel - nLevels))
if [ "$minDepth" -lt 2 ]; then
    if [ $verbose -eq 1 ]; then
        echoerr -e "\e[37mParent directory levels to search ($nLevels) are as high or higher ($nLevelsFile) than '/dir'. This is not allowed as the resulting file searches may be very slow"'!'"Reducing to two folders below root\e[0m"
    fi
    minDepth=2
fi


### Check include paths ###

if [ ! -z "$INC" ]; then
    INC=$INC:
fi
INC=$INC:.:$rootFolder

#INC_ARR=$(echo $INC | tr ":" "\n")
IFS=":" read -a includePaths <<< "$INC"
if [ $verbose -eq 1 ]; then
    echoerr -e "\e[37mInclude Paths (first will be searched first):"
    for path in ${includePaths[@]}; do
        echoerr "    $path"
    done
    echoerr -e "\e[0m"
fi

############################### Begin Main Logic ###############################

searchedPaths=()

# printAllIncludes <source-file> <level>
printAllIncludes() {
    local file level indent includes i path foundPath
    file=$1
    level=$2

    for path in ${searchedPaths[@]}; do
        if [ "$path" == "$file" ]; then
            if [ $quiet -eq 1 ]; then
                return 1
            fi
            echo -ne "\e[37m"
            break
        fi
    done

    # print current file
    indent=$(($level * 4))
    printf "%.*s" $indent "                                                    "
    #if [ ! $indent -eq 0 ]; then
    #    printf "+ ";
    #fi
    #printf '%s' "${file#$rootFolder}"
    printf '%s' "$(getRelativePath "$rootFolder" "$file")"

    # search for file in paths to determine if already found and we can stop parsing it
    for path in ${searchedPaths[@]}; do
        if [ "$path" == "$file" ]; then
            printf " -> already loaded\e[0m\n"
            return 1
        fi
    done
    printf "\n"

    # http://stackoverflow.com/questions/19771965/split-bash-string-by-newline-characters
    IFS=$'\n' read -rd '' -a includes <<<"$(getIncludes "$file")"
    searchedPaths+=( "$file" )

    # parse dependencies recursively
    for (( i=0; i<${#includes[@]}; i++ )); do
    {
        includeFile=${includes[i]}
        # try to find file in include paths
        foundPath=
        for path in ${file%/*} ${includePaths[@]}; do
            #echoerr -e "\e[36m path = $path \e[0m"
            if [ -f "$path/$includeFile" ]; then
                foundPath="$path/$includeFile"
                break
            fi
        done

        # if no suitable path found, try upper directories
        if [ ! -f "$foundPath" ]; then
            upperDir="$(cd "$(dirname "$file")" && pwd)"
            while [ $(getPathDepth "$upperDir") -ge $minDepth ]; do
                includeFileFolder=${includeFile%/*}
                includeFileName=${includeFile##*/}
                if [ $verbose -eq 1 ]; then
                    echoerr "find '$upperDir/$includeFileFolder' -name '$includeFileName'"
                fi
                IFS=$'\n' read -rd '' -a tmpFoundFiles <<<"$(find "$upperDir/$includeFileFolder" -name "$includeFileName" 2>/dev/null)"

                # test that not only file name, but also path match
                foundFiles=()
                for file in ${tmpFoundFiles[@]}; do
                    file=$(realPath "$file")
                    if [ "${file%$includeFile}" != "$file" ]; then
                        foundFiles+=("$file")
                    elif [ $verbose -eq 1 ]; then
                        echoerr -e "\e[37mSorting out '$file', because path does not match '$includeFile'\e[0m"
                    fi
                done

                if [ $verbose -eq 1 ]; then
                    echoerr -e "\e[37mTrying '$(cd $upperDir && pwd)'. Found ${#tmpFoundFiles[@]} file(s):\e[0m"
                    for file in ${tmpFoundFiles[@]}; do
                        echo "  $(realPath "$file")"
                    done
                    echoerr "out of which these remain:"
                    for file in ${foundFiles[@]}; do
                        echo "  $file"
                    done
                fi

                if [ ${#foundFiles[@]} -gt 1 ]; then
                    if [ $verbose -eq 1 ]; then
                        echoerr -e "\e[31mAmbiguous include paths possible:\n$foundFile\nSkipping this"'!'"\e[0m"
                    fi
                    break
                elif [ ${#foundFiles[@]} -eq 1 ]; then
                    foundFile=${foundFiles[0]}
                    incRoot=${foundFile%%$includeFile}
                    if [ "${incRoot:${#incRoot}-1:1}" == '/' ]; then
                        incRoot=${incRoot:0:-1}
                    fi
                    includePaths+=( "${incRoot#$rootFolder}" )
                    if [ $verbose -eq 1 ]; then
                        echoerr -e "\e[37m\nAdding '$incRoot' to include paths.\e[0m"
                    fi
                    foundPath=$incRoot/$includeFile
                    break
                fi

                upperDir=$upperDir/..
            done
        fi

        if [ ! -f "$foundPath" ]; then
            indent=$(( ($level+1) * 4))
            printf '\e[31m%.*s' $indent "                                      "
            printf '%s -> not found!\e[0m\n' "$includeFile"
            continue
        fi

        printAllIncludes "$foundPath" $(($level+1))
    }
    done
}

printAllIncludes "$rootFile" 0
printf "\n"
#if [ $nLevels -ge 0 ]; then
    ( IFS=':'; echo -e "Include Paths:\n    ${includePaths[*]}\n" )
#fi
